/*
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.l3vels.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Asset to mint. You need to provide token ID or asset ID and amount to mint
 */
@JsonPropertyOrder({
  MintDtoAsset.JSON_PROPERTY_TOKEN_ID,
  MintDtoAsset.JSON_PROPERTY_ASSET_ID,
  MintDtoAsset.JSON_PROPERTY_AMOUNT
})
@JsonTypeName("MintDto_asset")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-21T12:10:08.229616-05:00[America/Bogota]")
public class MintDtoAsset {
  public static final String JSON_PROPERTY_TOKEN_ID = "token_id";
  private BigDecimal tokenId;

  public static final String JSON_PROPERTY_ASSET_ID = "asset_id";
  private String assetId;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  public MintDtoAsset() {
  }

  public MintDtoAsset tokenId(BigDecimal tokenId) {
    
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Token ID to mint. You can provide this or asset_id
   * @return tokenId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOKEN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTokenId() {
    return tokenId;
  }


  @JsonProperty(JSON_PROPERTY_TOKEN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTokenId(BigDecimal tokenId) {
    this.tokenId = tokenId;
  }


  public MintDtoAsset assetId(String assetId) {
    
    this.assetId = assetId;
    return this;
  }

   /**
   * Asset ID to mint. You can provide this or token_id
   * @return assetId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASSET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAssetId() {
    return assetId;
  }


  @JsonProperty(JSON_PROPERTY_ASSET_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssetId(String assetId) {
    this.assetId = assetId;
  }


  public MintDtoAsset amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount to mint
   * @return amount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MintDtoAsset mintDtoAsset = (MintDtoAsset) o;
    return Objects.equals(this.tokenId, mintDtoAsset.tokenId) &&
        Objects.equals(this.assetId, mintDtoAsset.assetId) &&
        Objects.equals(this.amount, mintDtoAsset.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenId, assetId, amount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MintDtoAsset {\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

