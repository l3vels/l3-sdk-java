/*
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.l3vels.sdk.api;

import java.math.BigDecimal;
import com.l3vels.sdk.models.CreatePlayerDto;
import com.l3vels.sdk.models.Player;
import com.l3vels.sdk.models.PlayerAsset;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlayerApi
 */
@Ignore
public class PlayerApiTest {

    private final PlayerApi api = new PlayerApi();

    
    /**
     * Retrieve player asset by ID
     *
     * Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerAssetControllerPlayerAssetByIdTest() {
        String authorization = null;
        String id = null;
        String projectId = null;
        PlayerAsset response = api.playerAssetControllerPlayerAssetById(authorization, id, projectId);

        // TODO: test validations
    }
    
    /**
     * Retrieve player assets
     *
     * This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, game/project or other properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerAssetControllerPlayerAssetsTest() {
        String authorization = null;
        String projectId = null;
        String assetId = null;
        String playerId = null;
        String sort = null;
        String order = null;
        BigDecimal limit = null;
        BigDecimal page = null;
        List<PlayerAsset> response = api.playerAssetControllerPlayerAssets(authorization, projectId, assetId, playerId, sort, order, limit, page);

        // TODO: test validations
    }
    
    /**
     * Create new player
     *
     * Create new player for game/project. Example: Create new player Jack in game Call of Duty.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerControllerCreatePlayerTest() {
        String authorization = null;
        CreatePlayerDto createPlayerDto = null;
        Player response = api.playerControllerCreatePlayer(authorization, createPlayerDto);

        // TODO: test validations
    }
    
    /**
     * Delete a Player
     *
     * This API method allows developers to delete a Player by providing the ID of the Player. Once deleted, the Player and all associated assets will be removed from the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerControllerDeletePlayerTest() {
        String authorization = null;
        api.playerControllerDeletePlayer(authorization);

        // TODO: test validations
    }
    
    /**
     * Retrieve players
     *
     * Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerControllerGetPlayersTest() {
        String authorization = null;
        String projectId = null;
        String sort = null;
        String order = null;
        String searchText = null;
        BigDecimal limit = null;
        BigDecimal page = null;
        List<Player> response = api.playerControllerGetPlayers(authorization, projectId, sort, order, searchText, limit, page);

        // TODO: test validations
    }
    
    /**
     * Retrieve player by ID
     *
     * Retrieves a specific player by ID associated with game/project. Example: retrieve player Jack from game Call of Duty.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerControllerPlayerByIdTest() {
        String authorization = null;
        String id = null;
        String projectId = null;
        Player response = api.playerControllerPlayerById(authorization, id, projectId);

        // TODO: test validations
    }
    
    /**
     * Count players
     *
     * Count players in game. Example: count players in game Call of Duty.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerControllerPlayersCountByGameIdTest() {
        String authorization = null;
        String projectId = null;
        BigDecimal response = api.playerControllerPlayersCountByGameId(authorization, projectId);

        // TODO: test validations
    }
    
    /**
     * Update an existing Player
     *
     * This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void playerControllerUpdatePlayerTest() {
        String authorization = null;
        Player response = api.playerControllerUpdatePlayer(authorization);

        // TODO: test validations
    }
    
}
